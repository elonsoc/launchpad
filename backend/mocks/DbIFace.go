// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	buildingstypes "github.com/elonsoc/ods/backend/locations/v1/buildings/types"
	mock "github.com/stretchr/testify/mock"

	service "github.com/elonsoc/ods/backend/service"

	types "github.com/elonsoc/ods/backend/applications/types"
)

// DbIFace is an autogenerated mock type for the DbIFace type
type DbIFace struct {
	mock.Mock
}

// DeleteApplication provides a mock function with given fields: _a0
func (_m *DbIFace) DeleteApplication(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplication provides a mock function with given fields: _a0
func (_m *DbIFace) GetApplication(_a0 string) (types.Application, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 types.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Application, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) types.Application); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.Application)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplications provides a mock function with given fields: _a0
func (_m *DbIFace) GetApplications(_a0 string) ([]types.Application, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetApplications")
	}

	var r0 []types.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Application, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Application); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildingById provides a mock function with given fields: _a0
func (_m *DbIFace) GetBuildingById(_a0 string) (*buildingstypes.Building, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildingById")
	}

	var r0 *buildingstypes.Building
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*buildingstypes.Building, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *buildingstypes.Building); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildingstypes.Building)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildings provides a mock function with given fields:
func (_m *DbIFace) GetBuildings() ([]buildingstypes.Building, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBuildings")
	}

	var r0 []buildingstypes.Building
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]buildingstypes.Building, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []buildingstypes.Building); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]buildingstypes.Building)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInformation provides a mock function with given fields: _a0
func (_m *DbIFace) GetUserInformation(_a0 string) (*service.ExternalUserInformation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInformation")
	}

	var r0 *service.ExternalUserInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*service.ExternalUserInformation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *service.ExternalUserInformation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ExternalUserInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUser provides a mock function with given fields: _a0
func (_m *DbIFace) IsUser(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsUser")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsValidApiKey provides a mock function with given fields: _a0
func (_m *DbIFace) IsValidApiKey(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsValidApiKey")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewApp provides a mock function with given fields: _a0, _a1, _a2
func (_m *DbIFace) NewApp(_a0 string, _a1 string, _a2 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for NewApp")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *DbIFace) NewUser(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for NewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplication provides a mock function with given fields: _a0, _a1
func (_m *DbIFace) UpdateApplication(_a0 string, _a1 types.Application) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.Application) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDbIFace creates a new instance of DbIFace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbIFace(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbIFace {
	mock := &DbIFace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
